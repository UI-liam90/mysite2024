---
import { HTMLRender } from "~helpers/htmlRender";
import HTag from "~helpers/hTag.astro";
import "./style.scss";

const { blockData, blockContext } = Astro.props;
---

<div class="coding-hero-block">
    <div class="intro-title animate">
        <div class="coding-hero-title">
            <span class="line-one">{blockData.headingLineOne && <HTMLRender data={blockData.headingLineOne} />}</span>
            <span class="line-two">{blockData.headingLineTwo && <HTMLRender data={blockData.headingLineTwo} />}</span>
        </div>
    </div>
    <div class="terminal animate">
        <div class="terminal-topbar">
            <div class="terminal-btn terminal-btn--one"></div>
            <div class="terminal-btn terminal-btn--two"></div>
            <div class="terminal-btn terminal-btn--three"></div>
        </div>
        <div class="terminal-area">
            <div id="terminal-typing"></div>
        </div>
    </div>
</div>

<script>
    import { scrollObserver } from "~helpers/ScrollObserver";
    import { default as fitty } from "fitty";
    import { cmds, addCmds } from "src/context/nanoContext";
    import Typewriter from "typewriter-effect/dist/core";

    scrollObserver(".animate", "animate-enter");

    fitty(".line-one");
    fitty(".line-two");

    //setup typing terminal

    const currentDate = new Date();
    const hours = currentDate.getHours();
    let consoleStartLine = "godvibes bot 0001> ";
    let welcomeMessage = "";

    if (hours >= 0 && hours < 12) {
        welcomeMessage = "Good Morning";
    } else if (hours >= 12 && hours < 18) {
        welcomeMessage = "Good Afternoon";
    } else if (hours >= 17) {
        welcomeMessage = "Good Evening";
    } else {
        welcomeMessage = "Hello!";
    }
    const greetings = ["How are you Today?", "I hope you are having a great day :)", "How can I help you on this fine day?"];
    const typewriter = new Typewriter("#terminal-typing", {
        loop: false,
        delay: 25,
    });

    typewriter
        .typeString(`${consoleStartLine}`)
        .pauseFor(2500)
        .typeString(`${welcomeMessage} <br> ${consoleStartLine}`)
        .pauseFor(2000)
        .typeString(`${greetings[Math.floor(Math.random() * greetings.length)]} <br> ${consoleStartLine}`)
        .pauseFor(2000)
        .typeString(`This site has a number of small things that can happen depending on what you type into the console, why not try 'confetti'`)
        .callFunction(() => addUserTypingArea("#terminal-typing"))
        .pauseFor(1000)
        .start();

    const addUserTypingArea = (element) => {
        const el = document.querySelector(element);
        let commandsList = `
            <ul id="commandsList"></ul>
            ${consoleStartLine} <input id="commandEntry" />
        `;
        el.insertAdjacentHTML("beforeend", commandsList);
        el.querySelector(".Typewriter__cursor").style.display = "none";

        focusInput("#commandEntry");
        handleInputSubmit("#commandEntry");
        //renderCmds("#commandsList");
        renderCmds("#commandsList");
    };
    const focusInput = (element) => {
        const el = document.querySelector(element);
        el.focus();
        el.select();
    };
    const handleInputSubmit = (element) => {
        const el = document.querySelector(element);
        el.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                addCmds(el.value);
                el.value = "";
                focusInput(element);
                el.scrollIntoView();
            }
        });
    };
    const renderCmds = (element) => {
        const el = document.querySelector(element);
        cmds.subscribe((values) => {
            el.innerHTML = "";
            if (values.length > 0) {
                values.map((cmd) => {
                    el.insertAdjacentHTML("beforeend", `<li>${consoleStartLine} ${cmd}</li>`);
                });
            }
        });
    };
</script>
