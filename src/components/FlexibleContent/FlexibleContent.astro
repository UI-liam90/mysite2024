---
import ContactBlock from "~components/ContactBlock/ContactBlock.astro";
import FormBlock from "~components/FormBlock/FormBlock.astro";
import FaqBlock from "~components/FaqBlock";
import GalleryBlock from "~components/GalleryBlock";
import GlobalElementBlock from "~components/GlobalElementBlock/GlobalElementBlock.astro";
import HeroBlock from "~components/HeroBlock/HeroBlock.astro";
import NewsAndTrendsBlock from "~components/NewsAndTrendsBlock/NewsAndTrendsBlock.astro";
import TextBlock from "~components/TextBlock/TextBlock.astro";
import MultiColumnBlock from "~components/MultiColumnBlock/MultiColumnBlock.astro";
import { pageBuilderBlocks } from "~data/page";
const { blockData, contentType } = Astro.props;
const blocks = blockData;
---

{
    blocks &&
        blocks.map((block) => {
            switch (block.fieldGroupName) {
                case `PageBuilderBlocksContactBlockLayout`:
                    return <ContactBlock blockData={block} blockContext="single" />;
                case `PageBuilderBlocksFormBlockLayout`:
                    return <FormBlock blockData={block} blockContext="single" />;
                case `PageBuilderBlocksFaqBlockLayout`:
                    return <FaqBlock client:load blockData={block} blockContext="single" />;
                case `PageBuilderBlocksGalleryBlockLayout`:
                    return <GalleryBlock client:load blockData={block} blockContext="single" />;
                case `PageBuilderBlocksHeroBannerLayout`:
                    return <HeroBlock blockData={block} blockContext="single" />;
                case `PageBuilderBlocksNewsAndTrendsBlockLayout`:
                    return <NewsAndTrendsBlock blockData={block} blockContext="single" />;
                case `PageBuilderBlocksMultiColumnBlockLayout`:
                    return <MultiColumnBlock blockData={block} blockContext="single" />;
                case `PageBuilderBlocksTextBlockLayout`:
                    return <TextBlock blockData={block} blockContext="single" />;
                case "PageBuilderBlocksGlobalElementBlockLayout":
                    if (contentType === "GlobalElement") {
                        return null;
                    }
                    return <GlobalElementBlock blockData={block.elementToClone.nodes[0].pageBuilder.blocks} blockContext="single" />;
                default:
                    return null;
            }
        })
}
